#!/usr/bin/env python
# encoding: utf-8
import ob_help_tables_define
import json


# help_category
CATEGORY_ID = "help_category_id"
CATEGORY_NAME = "name"
CATEGORY_PARENT_ID = "parent_category_id"
CATEGORY_URL = "url"


# help_topic
TOPIC_ID = "help_topic_id"
TOPIC_CATEGORY_ID = "help_category_id"
TOPIC_NAME = "name"
TOPIC_DESCRIPTION = "description"
TOPIC_EXAMPLE = "example"
TOPIC_URL = "url"

# help_keyword
KEYWORD_ID = "help_keyword_id"
KEYWORD_NAME = "name"
KEYWORD_TOPIC_RELATION = "relation_topic"

sys_variable_topic_id_begin = 5000 # 5000 - 6000
sys_config_topic_id_begin = 6000 # > 6000
def check(category_list, topic_list, keyword_list):
	# Check if the same key exists
	check_list = []
	for topic in topic_list:
		if topic[TOPIC_NAME] in check_list:
			# error
			print("There are two topics with the same name: " + topic[TOPIC_NAME])
		else:
			check_list.append(topic[TOPIC_NAME])
	del check_list[:]
	for category in category_list:
		if category[CATEGORY_NAME] in check_list:
			# error
			print("There are two categories with the same name: " + category[CATEGORY_NAME])
		else:
			check_list.append(category[CATEGORY_NAME])
	del check_list[:]
	for keyword in keyword_list:
		if keyword[KEYWORD_NAME] in check_list:
			# error
			print("There are two keywords with the same name: " + keyword[KEYWORD_NAME])
		else:
			check_list.append(keyword[KEYWORD_NAME])



def make_header():
	sql_file = open(output_sql_file_name, "w")
	sql_file.write("/*\n  Do not edit this file, it is automatically generated from:\n  <oceanbase/src/sql/gen_ob_help_tables.py>\n*/\n\n")
	sql_file.write("USE mysql;\n")
	sql_file.write("start transaction;\n")
	sql_file.write("DELETE FROM help_category;\n")
	sql_file.write("DELETE FROM help_topic;\n")
	sql_file.write("DELETE FROM help_keyword;\n")
	sql_file.write("DELETE FROM help_relation;\n")

def make_tailer():
	sql_file = open(output_sql_file_name, "a+")
	sql_file.write("commit;\n")

def make_help_category(category_list):
	affect_rows = 0
	sql_file = open(output_sql_file_name, "a+")
	header_file = open(output_fill_help_table_header, "a+")
	count = 0
	for cat in category_list:
		affect_rows += 1
		category_id = cat[CATEGORY_ID]
		category_name = cat[CATEGORY_NAME]
		category_parent_id = cat[CATEGORY_PARENT_ID]
		url = cat[CATEGORY_URL]
		value = "(" + category_id + ",'" + category_name + "'," + category_parent_id + ",'" + url + "')"
		if count == 0:
			sql_file.write("INSERT INTO mysql.help_category (help_category_id,name,parent_category_id,url) VALUES " + value)
			header_file.write("\"INSERT INTO mysql.help_category (help_category_id,name,parent_category_id,url) VALUES " + value)
		else:
			sql_file.write(", " + value)			
			header_file.write(", " + value)
		count += 1
		if count == insert_batch_count:
			count = 0
			sql_file.write(";\n")
			header_file.write(";\\n\",\n")
	if count != 0:
		sql_file.write(";\n")
		header_file.write(";\\n\",\n")
	sql_file.close()
	header_file.close()
	return affect_rows


def make_help_topic_sys_variable():
	affect_rows = 0
	topic_id_iter = 1000
	json_file = open(sys_variable_define_filename,'r')
	all_the_vars = json_file.read( )
	json_Dict = json.loads(all_the_vars)
	json_file.close()
	sql_file = open(output_sql_file_name, "a+")
	header_file = open(output_fill_help_table_header, "a+")
	count = 0
	for k in json_Dict:
		affect_rows += 1
		item_dict = json_Dict[k]
		topic_id = str(topic_id_iter)
		category_id = str(ob_help_tables_define.sys_variable_category_id)
		topic_name = item_dict["name"]
		description = item_dict["info"]
		example = ""
		url = ""
		header_description = description.replace("\\","\\\\")
		value = "(" + topic_id + "," + category_id + ",'" + topic_name + "','" + description + "','" + example + "','" + url + "')"
		header_value = "(" + topic_id + "," + category_id + ",'" + topic_name + "','" + header_description + "','" + example + "','" + url + "')"
		topic_id_iter += 1
		if count == 0:
			sql_file.write("INSERT INTO mysql.help_topic (help_topic_id,help_category_id,name,description,example,url) VALUES " + value)
			header_file.write("\"INSERT INTO mysql.help_topic (help_topic_id,help_category_id,name,description,example,url) VALUES " + header_value)
		else:
			sql_file.write(", " + value)			
			header_file.write(", " + header_value)
		count += 1
		if count == insert_batch_count:
			count = 0
			sql_file.write(";\n")
			header_file.write(";\\n\",\n")
	if count != 0:
		sql_file.write(";\n")
		header_file.write(";\\n\",\n")
	sql_file.close()
	header_file.close()
	return affect_rows

def make_help_topic(topic_list):
	sql_file = open(output_sql_file_name, "a+")
	header_file = open(output_fill_help_table_header, "a+")
	count = 0
	affect_rows = 0
	for cat in topic_list:
		affect_rows += 1
		topic_id = cat[TOPIC_ID]
		category_id = cat[TOPIC_CATEGORY_ID]
		topic_name = cat[TOPIC_NAME]
		description = cat[TOPIC_DESCRIPTION]
		example = cat[TOPIC_EXAMPLE]
		url = cat[TOPIC_URL]
		header_description = description.replace("\\","\\\\")
		header_example = example.replace("\\","\\\\")
		value = "(" + topic_id + "," + category_id + ",'" + topic_name + "','" + description + "','" + example + "','" + url + "')"
		header_value = "(" + topic_id + "," + category_id + ",'" + topic_name + "','" + header_description + "','" + header_example + "','" + url + "')"
		if count == 0:
			sql_file.write("INSERT INTO mysql.help_topic (help_topic_id,help_category_id,name,description,example,url) VALUES " + value)
			header_file.write("\"INSERT INTO mysql.help_topic (help_topic_id,help_category_id,name,description,example,url) VALUES " + header_value)
		else:
			sql_file.write(", " + value)			
			header_file.write(", " + header_value)
		count += 1
		if count == insert_batch_count:
			count = 0
			sql_file.write(";\n")
			header_file.write(";\\n\",\n")
	if count != 0:
		sql_file.write(";\n")
		header_file.write(";\\n\",\n")

	sql_file.close()
	header_file.close()
	sys_variable_affect_rows = make_help_topic_sys_variable()
	affect_rows += sys_variable_affect_rows
	return affect_rows

def make_help_keyword_relation(keyword_list):
	affect_rows = 0
	sql_file = open(output_sql_file_name, "a+")
	header_file = open(output_fill_help_table_header, "a+")
	count = 0
	for cat in keyword_list:
		affect_rows += 1
		keyword_id = cat[KEYWORD_ID]
		keyword_name = cat[KEYWORD_NAME]
		relation_list = cat[KEYWORD_TOPIC_RELATION]
		keyword_sql = "(" + keyword_id + ",'" + keyword_name + "')"
		if count == 0:
			sql_file.write("INSERT INTO mysql.help_keyword (help_keyword_id,name) VALUES " + keyword_sql)
			header_file.write("\"INSERT INTO mysql.help_keyword (help_keyword_id,name) VALUES " + keyword_sql)
		else:
			sql_file.write(", " + keyword_sql)			
			header_file.write(", " + keyword_sql)
		count += 1
		if count == insert_batch_count:
			count = 0
			sql_file.write(";\n")
			header_file.write(";\\n\",\n")
	if count != 0:
		sql_file.write(";\n")
		header_file.write(";\\n\",\n")
	count = 0
	for cat in keyword_list:
		keyword_id = cat[KEYWORD_ID]
		relation_list = cat[KEYWORD_TOPIC_RELATION]
		for topic_id in relation_list:
			affect_rows += 1
			relation_sql = "(" + str(topic_id) + "," + keyword_id + ")"
			if count == 0:
				sql_file.write("INSERT INTO mysql.help_relation (help_topic_id,help_keyword_id) VALUES " + relation_sql)
				header_file.write("\"INSERT INTO mysql.help_relation (help_topic_id,help_keyword_id) VALUES " + relation_sql)
			else:
				sql_file.write(", " + relation_sql)			
				header_file.write(", " + relation_sql)
			count += 1
			if count == insert_batch_count:
				count = 0
				sql_file.write(";\n")
				header_file.write(";\\n\",\n")
	if count != 0:
		sql_file.write(";\n")
		header_file.write(";\\n\",\n")
	sql_file.close()
	header_file.close()
	return affect_rows


def make_fill_help_table_header_header():
	header_file = open(output_fill_help_table_header, "w")
	header_file.write("/*\n  Do not edit this file, it is automatically generated from:\n  <oceanbase/src/sql/gen_ob_help_tables.py>\n*/\n\n")
	header_file.write("const char* fill_help_tables_cmd[]={\n")

def make_fill_help_table_header_tailer(affect_rows):
	header_file = open(output_fill_help_table_header, "a+")
	header_file.write("NULL\n};")
	header_file.write("\n\nint64_t help_affect_rows = " + str(affect_rows) + ";\n")

sys_variable_define_filename = "../share/system_variable/ob_system_variable_init.json"

# json_file_name = "ob_init_help_table.json"
output_sql_file_name = "ob_fill_help_tables.sql"
output_fill_help_table_header = "../rootserver/ob_fill_help_table.h"
insert_batch_count = 10

# topic_list = parse_json(json_file_name)
check(ob_help_tables_define.category_list, ob_help_tables_define.topic_list, ob_help_tables_define.keyword_list)
make_fill_help_table_header_header()
make_header()
affect_rows1 = make_help_category(ob_help_tables_define.category_list)
affect_rows2 = make_help_topic(ob_help_tables_define.topic_list)
affect_rows3 = make_help_keyword_relation(ob_help_tables_define.keyword_list)
make_tailer()
make_fill_help_table_header_tailer(affect_rows1 + affect_rows2 + affect_rows3)